{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Fronty","text":"<p> A frontend web framework for the web </p> <p>Created by Md. Almas Ali</p> <p> </p> <p>Documentation: https://almas-ali.github.io/fronty</p> <p>Source Code: https://github.com/Almas-Ali/fronty</p> <p>Fronty is a lightweight, fast, and easy-to-use Python-based frontend web framework that simplifies web development by allowing developers to create web pages using only Python. Its simple syntax and intuitive design make it an excellent option for beginners or developers who prefer working with Python.</p>"},{"location":"index.html#the-key-features-are","title":"The key features are:","text":"<ul> <li>Python-based frontend web framework</li> <li>No need to use HTML, CSS, or JavaScript (though you can if you want)</li> <li>Simple and lightweight</li> <li>Fast rendering times</li> <li>Easy to use and customize</li> <li>Can integrate with other Python libraries and frameworks, such as Flask, Django, FastAPI, etc.</li> <li>Growing community with extensive documentation and resources.</li> </ul>"},{"location":"index.html#sponsors","title":"Sponsors","text":"<p>No sponsors yet. Be the first one to sponsor this project. Become a sponsor</p>"},{"location":"contribution.html","title":"Contribution","text":"<p>Pull requests are welcome. For any changes, please open an issue first to discuss what you would like to change.</p> <p>Thanks for using Fronty!</p>"},{"location":"examples.html","title":"Example projects","text":"<p>Project URL: Starter project</p> <p></p> <p>Project URL: Bootstrap Integration</p> <p></p> <p>Project URL: Custom CSS Project</p> <p></p> <p></p>"},{"location":"examples.html#how-to-run-the-example-projects","title":"How to run the example projects?","text":"<p>You can easily run the example projects by cloning the Fronty repository and running the following commands in your terminal.</p> <ol> <li>Clone the Fronty repository.</li> <li> <p>Go to the examples/starter project directory.  <pre><code>cd fronty/examples/starter\\ project\n</code></pre></p> </li> <li> <p>Run the following command in your terminal. <pre><code>python app.py\n</code></pre></p> </li> <li> <p>Open your browser and go to http://localhost:5000 </p> </li> <li> <p>You can also run the other example projects by going to their directories and running the same command.</p> </li> <li> <p>Note: You have to install a backend server to run the project. Fronty does not provide a backend server. You can use any backend server you want. For example, you can use Flask. You can also use Fronty with Django. But you have to install Django first. For simplicity, we have used Flask in the example projects. We are woring on a backend server for Fronty. It will be available soon.</p> </li> </ol>"},{"location":"installation.html","title":"Installation","text":"<p>You can easily install Fronty using pip. Just run the following command in your terminal.</p> <pre><code>pip install fronty\n</code></pre> <p>You can also install a backend framework to use with Fronty. For example, if you want to use Fronty with Flask, you can checkout flask documentation https://flask.palletsprojects.com/en/2.1.x/installation/</p> <p>If you want to use Fronty with Django, you can checkout django documentation https://docs.djangoproject.com/en/4.2/topics/install/</p> <p>If you want to use Fronty with FastAPI, you can checkout fastapi documentation https://fastapi.tiangolo.com/tutorial/first-steps/</p> <p>Start learning Fronty by reading the documentation.</p> <p>Want to contribute? Check out the Github project.</p>"},{"location":"quick-start.html","title":"Quick Start","text":"<p>As fronty is a very simple framework, it is very easy to use. You can easily create a website using. It is mainly focused on the frontend part. So, we haven't add any backend features. But, you can easily add backend features using any backend framework like Flask, Django, Fastapi etc.</p> <p>But, we are working on a backend framework for fronty named Backkr. And we are also working on a database framework named Flexdb. So, you can easily create a full stack website with database using Fronty in only Python technology without knowing any kind of web technologies like HTML, CSS, and JavaScript.</p> <p>Here we will use flask as a backend framework for making this documentation short. But, you can use any backend framework you want. We will update this documentation when we release Backkr and Flexdb. So, you can easily create a full stack website using only Python.</p>"},{"location":"quick-start.html#starter-template","title":"Starter template","text":"app.py<pre><code>from flask import Flask, request\nfrom fronty.html import *\napp = Flask(__name__)\ndef home(request) -&gt; Html:\n'''This is the home page view function'''\nreturn Html(\nHead(\nTitle('Home'),\nMeta(charset='utf-8'),\nMeta(name='viewport', content='width=device-width, initial-scale=1'),\n),\nBody(\nElement(\n'center',\nElement(\n'h1',\n'Welcome to Fronty!'\n),\nElement(\n'p',\n'Fronty is a frontend web framework.'\n),\n)\n)\n)\n@app.route('/')\ndef index() -&gt; str:\n'''This is the home page view function'''\nreturn home(\nrequest=request,\n).render()\nif __name__ == '__main__':\napp.run(debug=True)\n</code></pre> <p>This is a starter template for fronty. You can use this template to create a basic website using fronty.  First, we import the Flask and request from flask. Then, we import Html, Head, Title, Meta, Body, Element from fronty.html package.  Then, we create a flask app. Then, we create a home view function. This view function will return a Html object. This Html object will contain the HTML code for the home page.  Then, we create a index view function. This view function will call the home view function and render the HTML code.  Then, we run the flask app.</p> <p>Fronty has a very simple syntax. You can easily create a website using it. It has some built-in element like Button, Link, Anchor etc. You can use these elements to create a website. You can also create your own element using the BaseElement class. We will see how to create a element in the customization section.</p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"components/introduction.html","title":"Components","text":""},{"location":"components/introduction.html#what-are-components","title":"What are Components?","text":"<p>Components are the building blocks of your application. They are reusable UI elements that can be composed together to build a UI. Components are also the unit of encapsulation for the UI, CSS, and behavior. Components for manipulating HTML, CSS, and JavaScript from Python code are provided by the <code>fronty</code> package. Components are created by subclassing the <code>fronty.html.BaseElement</code> class. We will learn more about components in the customizing components section.</p>"},{"location":"components/introduction.html#built-in-components","title":"Built-in Components","text":"<p>Fronty provides a set of built-in components that can be used to create a UI. These components are:</p>"},{"location":"components/introduction.html#for-javascript","title":"For JavaScript","text":"<p>Till now, there is no built-in component for JavaScript. But you can use the <code>Script</code> component to load JavaScript codes in your website from js file. </p>"},{"location":"components/css/attributes.html","title":"Attributes of CSS Components","text":""},{"location":"components/css/attributes.html#attributes","title":"Attributes","text":""},{"location":"components/css/attributes.html#properties","title":"properties","text":"<p><code>properties</code> is a dictionary that contains all the properties of a CSS component. It is a required attribute of a <code>Selector</code> element. You have to pass a dictionary to this attribute. The keys of the dictionary are the properties of the CSS component and the values of the dictionary are the values of the properties. Here is an example:</p> Example of properties attribute<pre><code>from fronty.css import CSS, Selector, Style\ncss = CSS(\nSelector('body')\n.properties({\n\"background-color\": \"red\",\n\"color\": \"white\",\n\"font-size\": \"20px\",\n\"font-weight\": \"bold\",\n\"padding\": \"10px\",\n\"border-radius\": \"5px\",\n\"border\": \"1px solid black\"\n})\n)\nprint(css.render())\n</code></pre> <p>Output:</p> Output of the above code<pre><code>body{background-color:red;color:white;font-size:20px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}\n</code></pre> <p>Fronty returns every frontend code minified for better performance.</p>"},{"location":"components/css/introduction.html","title":"CSS Components","text":""},{"location":"components/css/introduction.html#what-are-css-components","title":"What are CSS Components?","text":"<p>CSS components are a list of dictionary that can be used to create a CSS styling fast and easily. These components are very easy to use and can be used to create a CSS styling in a few lines of code. Here is lots of customization options are available. Let's get started.</p>"},{"location":"components/css/introduction.html#important-css-components","title":"Important CSS Components","text":"<p><code>CSS</code> : To create a css in a html website.</p> <p><code>Selector</code> : To create a selector in a html website. It is like query selector in JavaScript.</p> <p><code>Style</code> : To create a style in a html website.</p>"},{"location":"components/css/introduction.html#using-css-components","title":"Using CSS Components","text":"<p>To use CSS components, you have to import the <code>fronty.css</code> module methods. <code>CSS</code>, <code>Selector</code> and <code>Style</code> are the methods of <code>fronty.css</code> module. Here is an example of using <code>fronty.css</code> module methods:</p> Example of importing fronty.css module<pre><code>from fronty.css import CSS, Selector, Style\ncss = CSS(\nSelector('body')\n)\nprint(css.render())\n</code></pre> <p>With this you can create a selector in a html website. But it is not enough to create a css file. You have to add some properties to the selector. To add properties to the selector, you have to use the <code>properties</code> attribute of the <code>Selector</code> element. Here is an example:</p> Example of properties attribute<pre><code>from fronty.css import CSS, Selector, Style\ncss = CSS(\nSelector('body')\n.properties({\n\"background-color\": \"red\",\n\"color\": \"white\",\n\"font-size\": \"20px\",\n\"font-weight\": \"bold\",\n\"padding\": \"10px\",\n\"border-radius\": \"5px\",\n\"border\": \"1px solid black\"\n})\n)\nprint(css.render())\n</code></pre> <p>Output:</p> Output of the above code<pre><code>body{background-color:red;color:white;font-size:20px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}\n</code></pre> <p>Here we have provided a dictionary in <code>properties</code> method of <code>Selector</code> class. The keys of the dictionary are the properties of the CSS component and the values of the dictionary are the values of the properties. You can add as many properties as you want. You can also add multiple selectors in a CSS file. Here is an example:</p> Example of multiple selectors<pre><code>from fronty.css import CSS, Selector, Style\ncss = CSS(\nSelector('body')\n.properties({\n\"background-color\": \"red\",\n\"color\": \"white\",\n\"font-size\": \"20px\",\n\"font-weight\": \"bold\",\n\"padding\": \"10px\",\n\"border-radius\": \"5px\",\n\"border\": \"1px solid black\"\n}),\nSelector('h1')\n.properties({\n\"color\": \"blue\",\n\"font-size\": \"30px\",\n\"font-weight\": \"bold\",\n\"padding\": \"10px\",\n\"border-radius\": \"5px\",\n\"border\": \"1px solid black\"\n})\n)\nprint(css.render())\n</code></pre> <p>Output:</p> Output of the above code<pre><code>body{background-color:red;color:white;font-size:20px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}h1{color:blue;font-size:30px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}\n</code></pre> <p>You can also add multiple properties in a selector. Here is an example:</p> Example of multiple properties<pre><code>from fronty.css import CSS, Selector, Style\ncss = CSS(\nSelector('body')\n.properties({\n\"background-color\": \"red\",\n\"color\": \"white\",\n\"font-size\": \"20px\",\n\"font-weight\": \"bold\",\n\"padding\": \"10px\",\n\"border-radius\": \"5px\",\n\"border\": \"1px solid black\"\n})\n.properties({\n\"color\": \"blue\",\n\"font-size\": \"30px\",\n\"font-weight\": \"bold\",\n\"padding\": \"10px\",\n\"border-radius\": \"5px\",\n\"border\": \"1px solid black\"\n})\n)\nprint(css.render())\n</code></pre> <p>Output:</p> Output of the above code<pre><code>body{background-color:red;color:blue;font-size:30px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}\n</code></pre> <p>Here we can see, only the unique properties are added to the selector and the duplicate properties are overwritten with the new properties.</p>"},{"location":"components/css/introduction.html#using-style-component","title":"Using Style Component","text":"<p>You can also use the <code>Style</code> component to create a CSS file. Here is an example:</p> Example of Style component<pre><code>from fronty.css import CSS, Selector\nfrom fronty.html import Style\ncss = CSS(\nStyle('body{background-color:red;color:white;font-size:20px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}'),\nStyle('h1{color:blue;font-size:30px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}')\n)\nprint(css.render())\n</code></pre> <p>Output:</p> Output of the above code<pre><code>&lt;style type=\"text/css\" href=\"\" rel=\"stylesheet\"&gt;body{background-color:red;color:white;font-size:20px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}&lt;/style&gt;&lt;style type=\"text/css\" href=\"\" rel=\"stylesheet\"&gt;h1{color:blue;font-size:30px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}&lt;/style&gt;\n</code></pre> <p>This is very unrealistic to create a style component like this. But you can use this method to add a CSS to your website. Here is an example:</p> Example of Style component<pre><code>from fronty.css import CSS, Selector\nfrom fronty.html import Html, Head, Title, Meta, Style, Body, H1\ncss = CSS(\nSelector('body')\n.properties({\n\"background-color\": \"red\",\n\"color\": \"white\",\n\"font-size\": \"20px\",\n\"font-weight\": \"bold\",\n\"padding\": \"10px\",\n\"border-radius\": \"5px\",\n\"border\": \"1px solid black\"\n}),\nSelector('h1')\n.properties({\n\"color\": \"blue\",\n\"font-size\": \"30px\",\n\"font-weight\": \"bold\",\n\"padding\": \"10px\",\n\"border-radius\": \"5px\",\n\"border\": \"1px solid black\"\n}),\n)\n...\n# Now we will add the style component to the html component\nhtml = Html(\nHead(\nTitle('My Website'),\nMeta(charset=\"UTF-8\"),\nMeta(name=\"viewport\", content=\"width=device-width, initial-scale=1.0\"),\nStyle(css.render())\n),\nBody(\nH1('Hello World')\n)\n)\nprint(html.render())\n</code></pre> <p>Output:</p> Output of the above code<pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;My Website&lt;/title&gt;&lt;meta charset=\"UTF-8\"&gt;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;&lt;style type=\"text/css\" href=\"\" rel=\"stylesheet\"&gt;body{background-color:red;color:white;font-size:20px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}h1{color:blue;font-size:30px;font-weight:bold;padding:10px;border-radius:5px;border:1px solid black}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> <p>This is how you can add a CSS to your website fast, easily and efficiently with <code>Style</code> component.</p>"},{"location":"components/html/attributes.html","title":"Attributes of Component Elements","text":""},{"location":"components/html/attributes.html#attributes","title":"Attributes","text":"<p>The attributes of the component elements are the same as the attributes of the html elements. You can use the attributes of the html elements in the component elements. Check the attributes of the html elements.</p>"},{"location":"components/html/attributes.html#important-attributes","title":"Important attributes","text":""},{"location":"components/html/attributes.html#id","title":"id","text":"<p>The <code>id</code> attribute is used to give a unique id to a component element. You can use this id to select the component element using JavaScript. <code>Element().id('something')</code> or <code>Element(id='something')</code> can be used to set the id of a component element.</p>"},{"location":"components/html/attributes.html#class","title":"class","text":"<p>The <code>class</code> attribute is used to give multiple classes to a component element. You can use the same method again to override the previous class. <code>Element().class_('something1 something2 somethingNth')</code> or <code>Element(class='something1 something2 somethingNth')</code> can be used to set the class of a component element. You can also use <code>class_</code> instead of <code>class</code> to set the class of a component element as <code>class</code> is a reserved keyword in Python and every programming language.</p>"},{"location":"components/html/attributes.html#placeholder","title":"placeholder","text":"<p>The <code>placeholder</code> attribute is used to set the placeholder of a field. <code>Element().placeholder('something')</code> or <code>Element(placeholder='something')</code> can be used to set the placeholder of a field. It is a method in the <code>BaseElement</code> class. You can use this any element that accepts the <code>placeholder</code> attribute as it is defined in the <code>BaseElement</code> class.</p>"},{"location":"components/html/attributes.html#type","title":"type","text":"<p>The <code>type</code> attribute is used to set the type of a field. <code>Element().type('something')</code> or <code>Element(type='something')</code> can be used to set the type of a field. It is a method in the <code>BaseElement</code> class. You can use this any element that accepts the <code>type</code> attribute as it is defined in the <code>BaseElement</code> class.</p>"},{"location":"components/html/attributes.html#name","title":"name","text":"<p>The <code>name</code> attribute is used to set the name of a field. <code>Element().name('something')</code> or <code>Element(name='something')</code> can be used to set the name of a field. It is a method in the <code>BaseElement</code> class. You can use this any element that accepts the <code>name</code> attribute as it is defined in the <code>BaseElement</code> class.</p>"},{"location":"components/html/attributes.html#style","title":"style","text":"<p>The <code>style</code> attribute is used to give inline CSS to a component element. You can use the same method again to override the previous style. <code>Element().style(color='red', background_color='blue')</code> can be used to set the style of a component element. This method takes keyword arguments as the CSS properties and their values. Some CSS properties have hyphen in their name. You can use underscore instead of hyphen in the name of the CSS properties. For example, <code>background-color</code> can be written as <code>background_color</code>.</p>"},{"location":"components/html/attributes.html#attr","title":"attr","text":"<p>The <code>attr</code> attribute is used to give attributes to a component element. You can add as much as you need attributes to a component element. <code>Element().attr('key', 'value').attr('more', 'more')</code> can be used to set the attribute of a component element. This method takes two arguments as the key and value of the attribute.</p>"},{"location":"components/html/attributes.html#required","title":"required","text":"<p>The <code>required</code> attribute is used to make a input field required. <code>Element().required</code> can be used to make a input field required. It is just a property of the <code>Input</code> component element. You can use this any element that accepts the <code>required</code> attribute as it is defined in the <code>BaseElement</code> class.</p>"},{"location":"components/html/attributes.html#disabled","title":"disabled","text":"<p>The <code>disabled</code> attribute is used to make a input field disabled. <code>Element().disabled</code> can be used to make a input field disabled. It is just a property of the <code>Input</code> component element. You can use this any element that accepts the <code>disabled</code> attribute as it is defined in the <code>BaseElement</code> class.</p>"},{"location":"components/html/attributes.html#readonly","title":"readonly","text":"<p>The <code>readonly</code> attribute is used to make a input field readonly. <code>Element().readonly</code> can be used to make a input field readonly. It is just a property of the <code>Input</code> component element. You can use this any element that accepts the <code>readonly</code> attribute as it is defined in the <code>BaseElement</code> class.</p>"},{"location":"components/html/attributes.html#value","title":"value","text":"<p>The <code>value</code> attribute is used to set the value of a field. <code>Element().value('something')</code> or <code>Element(value='something')</code> can be used to set the value of a field. It is a method in the <code>BaseElement</code> class. You can use this any element that accepts the <code>value</code> attribute as it is defined in the <code>BaseElement</code> class.</p>"},{"location":"components/html/introduction.html","title":"HTML Components","text":""},{"location":"components/html/introduction.html#what-are-html-components","title":"What are HTML Components?","text":"<p>HTML components are some simple set of classes that can be used to create a HTML website fast and easily. These components are very easy to use and can be used to create a HTML website in a few lines of code. Try to create a HTML website using these components and you will see how easy it is to create a HTML website using these components. So, let's get started.</p>"},{"location":"components/html/introduction.html#built-in-html-components","title":"Built-in HTML Components","text":"<p><code>Html</code> : To create the main HTML page layout.</p> <p><code>Head</code> : To create the head section of a html website.</p> <p><code>Title</code>: To describe the title of a website in the head section.</p> <p><code>Meta</code> : To describe all types of meta tags for SEO.</p> <p><code>Body</code> : To create the body structure of a html website.</p> <p><code>Script</code>: To load Javascript codes in fronty based website.</p> <p><code>Style</code>: To write custom CSS fronty.</p> <p><code>Link</code> : To load CSS codes in fronty based website.</p> <p><code>Anchor</code> : To create a anchor links in a html website.</p> <p><code>Image</code> : To load images in a html website.</p> <p><code>Button</code> : To create a button in a html website.</p> <p><code>Input</code> : To create a input field in a html website.</p> <p><code>Text</code> : To create a text in a html website.</p> <p><code>Break</code> : To create a break line in a html website.</p> <p><code>Form</code> : To create a form in a html website.</p> <p><code>Div</code> : To create a div in a html website.</p> <p><code>Span</code> : To create a span in a html website.</p> <p><code>H1</code> : To create a h1 in a html website.</p> <p><code>H2</code> : To create a h2 in a html website.</p> <p><code>H3</code> : To create a h3 in a html website.</p> <p><code>H4</code> : To create a h4 in a html website.</p> <p><code>H5</code> : To create a h5 in a html website.</p> <p><code>H6</code> : To create a h6 in a html website.</p> <p><code>P</code> : To create a p in a html website.</p> <p><code>Ul</code> : To create a ul in a html website.</p> <p><code>Ol</code> : To create a ol in a html website.</p> <p><code>Li</code> : To create a li in a html website.</p> <p><code>Table</code> : To create a table in a html website.</p> <p><code>Tr</code> : To create a tr in a html website.</p> <p><code>Td</code> : To create a td in a html website.</p> <p><code>Th</code> : To create a th in a html website.</p> <p><code>Caption</code> : To create a caption in a html website.</p> <p><code>Thead</code> : To create a thead in a html website.</p> <p><code>Tbody</code> : To create a tbody in a html website.</p> <p><code>Tfoot</code> : To create a tfoot in a html website.</p> <p><code>Iframe</code> : To create a iframe in a html website.</p> <p><code>Audio</code> : To create a audio in a html website.</p> <p><code>Video</code> : To create a video in a html website.</p> <p><code>Source</code> : To create a source in a html website.</p> <p><code>Select</code> : To create a select in a html website.</p> <p><code>Option</code> : To create a option in a html website.</p> <p><code>Nav</code> : To create a nav in a html website.</p> <p><code>Header</code> : To create a header in a html website.</p> <p><code>Footer</code> : To create a footer in a html website.</p> <p><code>Section</code> : To create a section in a html website.</p> <p><code>Article</code> : To create a article in a html website.</p> <p><code>Aside</code> : To create a aside in a html website.</p> <p><code>Main</code> : To create a main in a html website.</p> <p><code>Figure</code> : To create a figure in a html website.</p> <p><code>Figcaption</code> : To create a figcaption in a html website.</p> <p><code>Dl</code> : To create a dl in a html website.</p> <p><code>Dt</code> : To create a dt in a html website.</p> <p><code>Dd</code> : To create a dd in a html website.</p> <p><code>Time</code> : To create a time in a html website.</p> <p><code>Mark</code> : To create a mark in a html website.</p> <p><code>Small</code> : To create a small in a html website.</p> <p><code>Strong</code> : To create a strong in a html website.</p> <p><code>Em</code> : To create a em in a html website.</p> <p><code>Code</code> : To create a code in a html website.</p> <p><code>Pre</code> : To create a pre in a html website.</p> <p><code>Blockquote</code> : To create a blockquote in a html website.</p> <p><code>Empty</code> : To wrap multiple elements to return a single element.</p> <p><code>Comment</code> : To create a comment in a html website.</p>"},{"location":"components/html/introduction.html#_1","title":"Introduction","text":""},{"location":"components/js/introduction.html","title":"Javascript Components","text":""},{"location":"components/js/introduction.html#what-are-javascript-components","title":"What are Javascript Components?","text":""},{"location":"customization/customized-html.html","title":"Customizing Components","text":"<p>You can customize the built-in components or create your own components by subclassing the <code>fronty.html.BaseElement</code> class. Let's see how to create a custom component.</p> custom_components.py<pre><code>from fronty.html import (\nBaseElement,\nText\n)\nclass CustomComponent(BaseElement):\ndef __init__(self, *children, **attributes):\nsuper().__init__('custom-component', *children, **attributes)\n# Optional attributes if you want to add any custom attributes\nself._attributes['custom-attribute'] = 'custom-value'\n# Optional children if you want to add any custom children\nself._children = [\nText('This is a custom component.'),\n]\n</code></pre> <p>Now, you can use this component in your application.</p> main.py<pre><code>from flask import Flask # or any other framework\nfrom fronty.html import (\nHtml,\nHead,\nTitle,\nBody,\n)\nfrom custom_components import CustomComponent # import the custom component\napp = Flask(__name__)\ndef layout():\nreturn Html(\nHead(\nTitle('Custom Component')\n),\nBody(\nCustomComponent()\n)\n)\n@app.route('/')\ndef home():\nreturn layout().render()\nif __name__ == '__main__':\napp.run(debug=True)\n</code></pre>"},{"location":"projects/bootstrap-integration.html","title":"Bootstrap Integration","text":"<p>Now, let's integrate Bootstrap into our project. We will use the Bootstrap CDN to load the Bootstrap CSS and JavaScript files.</p> <p>First, we will create a new folder named <code>components</code> inside the <code>project</code> folder. Then, we will create a new component named <code>layout.py</code> inside the <code>components</code> folder.</p> project/components/layout.py<pre><code>from fronty.html import *\ndef navbar(request, **data) -&gt; Element:\n'''This is the navbar component'''\n# The navbar layout\n_layout = Nav(\nDiv(\nAnchor(\n'Fronty',\nhref='/',\n).class_('navbar-brand'),\nButton(\nElement('span').class_('navbar-toggler-icon'),\n).class_('navbar-toggler').attr('type', 'button').attr('data-bs-toggle', 'collapse').attr('data-bs-target', '#navbarScroll').attr('aria-controls', 'navbarScroll').attr('aria-expanded', 'false').attr('aria-label', 'Toggle navigation'),\nUl(\nLi(\nAnchor(\n'Home',\nhref='/',\n).class_('nav-link active').attr('aria-current', 'page'),\n).class_('nav-item'),\nLi(\nAnchor(\n'About',\nhref='/about',\n).class_('nav-link'),\n).class_('nav-item'),\nLi(\nAnchor(\n'More',\nhref='#',\n).class_('nav-link dropdown-toggle').attr('role', 'button').attr('data-bs-toggle', 'dropdown').attr('aria-expanded', 'false'),\nUl(\nLi(\nAnchor(\n'Action',\nhref='#',\n).class_('dropdown-item'),\n),\nLi(\nAnchor(\n'Another action',\nhref='#',\n).class_('dropdown-item'),\n),\nLi(\nElement('hr').class_('dropdown-divider'),\n),\nLi(\nAnchor(\n'Something else here',\nhref='#',\n).class_('dropdown-item'),\n),\n).class_('dropdown-menu'),\n).class_('nav-item dropdown'),\n).class_('navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll').attr('style', '--bs-scroll-height: 100px;'),\nForm(\nInput(\nplaceholder='Search',\naria_label='Search',\n).class_('form-control me-2').attr('type', 'search'),\nButton(\n'Search',\n).class_('btn btn-outline-success').attr('type', 'submit'),\n).class_('d-flex').attr('role', 'search'),\n).class_('container-fluid'),\n).class_('navbar navbar-expand-lg bg-body-tertiary')\nreturn _layout\ndef layout(request, **data) -&gt; Html:\n'''This is the layout component'''\n# The main layout\nreturn Html(\nHead(\nTitle('Fronty'),  # Page title\nMeta(charset='utf-8'),  # Character encoding\n# Responsive design\nMeta(name='viewport', content='width=device-width, initial-scale=1'),\n# Bootstrap CSS\nLink(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css',\nintegrity='sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD', crossorigin='anonymous'),\n),\nBody(\n# Navbar\nnavbar(request),\n# Main area of the page\n# The main area of the page is passed as a parameter to the layout component.\n# Get subcomponent from data or use default value\ndata.get('content', 'Empty content'),\n# Bootstrap JS\nScript(src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js\", integrity=\"sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN', crossorigin='anonymous'),\n),\n)\n</code></pre> <p>Now, we will create a <code>index.py</code> file inside the <code>components</code> folder. This file will contain the home page component.</p> project/components/index.py<pre><code>from fronty.html import (\nElement,\nDiv,\nH1,\nText,\nBreak\n)\n# components\nfrom components.layout import layout\ndef home(request, **data) -&gt; Element:\n'''This is the home page component'''\n_layout = layout(\nrequest=request,\ncontent=Div(\nH1('Home'),\nText(\nf\"\"\"\n                    Path: {request.path}\n{Break()}\n                    Method: {request.method}\n                \"\"\"\n),\n).class_('container text-center')\n)\nreturn _layout\n# We have added the about inside the index.py file for simplicity.\n# You can create a new file for the about page component.\ndef about(request, **data) -&gt; Element:\n'''This is the about page component'''\n_layout = layout(\nrequest=request,\ncontent=Div(\nH1('About'),\n).class_('container text-center')\n)\nreturn _layout\n</code></pre> <p>Now, we will update the <code>app.py</code> file to use the new components.</p> project/app.py<pre><code>from flask import Flask, request\nfrom fronty.html import *\n# components\nfrom components.index import home, about\napp = Flask(__name__)\n@app.route('/')\ndef index():\n'''This is the home page view function'''\nreturn home(\nrequest=request,\ntitle='A simple framework to build a website only with Python.',\n).render()\n@app.route('/about')\ndef about_view():\n'''This is the about page view function'''\nreturn about(\nrequest=request,\ntitle='A simple framework to build a website only with Python.',\n).render()\nif __name__ == '__main__':\napp.run(debug=True)\n</code></pre> <p>Now, we will run the project and open the home page in the browser.</p> <pre><code>python project/app.py\n</code></pre> <p>Visit http://127.0.0.1:5000 in your browser.</p> <p>Project URL: Bootstrap Integration</p> <p></p>"},{"location":"projects/custom-css-project.html","title":"Custom CSS Project","text":"<p>Initially, we have created a basic HTML only project. Then we have integrated Bootstrap into our project. Now, we will create a custom CSS project. We will use only Python to create this project. </p> <p>Let's create a new project directory named <code>custom_css_project</code>. Then create a new file named <code>app.py</code> inside the <code>custom_css_project</code> directory. </p> <p>Now, we will create everything in side the <code>app.py</code> file. </p> custom_css_project/app.py<pre><code>from flask import Flask\nfrom fronty.html import *\nfrom fronty.css import *\nfrom datetime import date\n# CSS components\ndef style_css():\n'''This is the style component'''\n# The CSS() is used to create a CSS object.\nreturn CSS(\n# The Selector() is used to create a CSS selector.\n# Here we have used the universal selector to select all the elements.\n# *{} means select all the elements.\n# We have css properties inside the properties() method.\n# Passed the css properties as keyword arguments.\n# The properties() method returns a CSSProperties object.\nSelector('*').properties({\n'margin': '0',\n'padding': '0',\n'font-family': 'Roboto, sans-serif, Arial',\n}),\n# Here we have selected the body tag.\n# We have used the Selector('body') to select the body tag.\n# Selector('body').properties({}) is used to add css properties to the body tag.\nSelector('body').properties({\n'background-color': '#d6d6e7',\n}),\nSelector('nav').properties({\n'background-color': '#484c7a',\n'color': '#fff',\n'padding': '20px',\n'position': 'absolute',\n'width': '80%',\n'margin': '0 10%',\n'top': '10px',\n'border-radius': '12px'\n}),\nSelector('nav ul').properties({\n'list-style': 'none',\n'display': 'flex',\n'flex-direction': 'row',\n'justify-content': 'center',\n}),\nSelector('nav ul li').properties({\n'margin': '0 10px'\n}),\nSelector('a').properties({\n'text-decoration': 'none',\n'color': '#fff',\n'padding': '12px',\n'border-radius': '12px',\n'transition': 'all 0.3s ease-in-out',\n'font-size': '18px',\n}),\nSelector('nav a:hover').properties({\n'background-color': '#ddd',\n'color': 'black',\n}),\nSelector('nav a:active').properties({\n'background-color': '#4CAF50',\n'color': 'white',\n}),\nSelector('.container').properties({\n'margin': '90px 10%',\n'width': '80%',\n'text-align': 'center',\n'padding': '20px',\n'background-color': '#fff',\n'border-radius': '12px',\n}),\nSelector('footer').properties({\n'position': 'absolute',\n'bottom': '10px',\n'width': '80%',\n'margin': '0 10%',\n'border-radius': '12px',\n'text-align': 'center',\n'padding': '20px',\n'background-color': '#484c7a',\n'color': '#fff',\n'font-size': '12px',\n}),\n)\n# Fronty components\ndef layout(request, **data):\n'''This is the layout component'''\n# The Html() is used to create a HTML object.\nreturn Html(\nHead(\nTitle('Custom CSS Project'),\nMeta(charset='UTF-8'),\nMeta(content=\"IE=edge\").attr('http-equiv', 'X-UA-Compatible'),\nMeta(name='viewport', content='width=device-width, initial-scale=1.0'),\nStyle(\nstyle_css().render(),\n),\n),\nBody(\nNav(\nUl(\nLi(\nAnchor('Home', href='/'),\n),\nLi(\nAnchor('About', href='/about'),\n)\n)\n),\nDiv(\nH1(\n'Custom CSS Project',\n),\nText(\n'This is a custom CSS project using Fronty.',\n),\n).class_('container'),\nFooter(\nf'\u00a9 {date.today().year} Fronty',\n),\n)\n)\napp = Flask(__name__)\n@app.route('/')\ndef home():\n'''This is the home page view function'''\n# The render() method is used to convert the python objects to HTML string.\nreturn layout(\nrequest=None,\n).render()\nif __name__ == '__main__':\napp.run(debug=True)\n</code></pre>"},{"location":"projects/starter-project.html","title":"Starter Project","text":"<p>For simplicity, we have created a starter project that you can use to get started with your own project. It is a simple project that contains a single page with a single component. It is a good starting point for your own project.</p> starter_project/app.py<pre><code>from flask import Flask, request\nfrom fronty.html import *\napp = Flask(__name__)\ndef home(request) -&gt; Html:\n'''This is the home page view function'''\n# The main HTML element.\nreturn Html(\n# The head tag contains the title and meta tags.\nHead(\n# The title tag contains the title of the page.\nTitle('Home'),\n# The meta tags contain the meta information of the page.\nMeta(charset='utf-8'),\nMeta(name='viewport', content='width=device-width, initial-scale=1'),\n),\n# The body tag contains all the content of the page.\nBody(\n# The center tag contains the main content of the page.\n# It is like using a HTML element when you don't know whats the name of a tag in fronty.\n# You can use the Element('tag') for this purpose.\nElement(\n'center',\n# The h1 tag contains the title of the page.\nH1(\n'Welcome to Fronty!'\n),\n# The Text() is used to add text to the page like paragraphs.\nText(\n'Fronty is a frontend web framework.'\n),\n)\n)\n)\n@app.route('/')\ndef index() -&gt; str:\n'''This is the home page view function'''\n# The render() method is used to convert the python objects to HTML string.\n# The render() method returns a string. So, we can return it directly.\nreturn home(\nrequest=request,\n).render()\nif __name__ == '__main__':\n# Run the app in debug mode.\n# Learn more about Flask at https://flask.palletsprojects.com/en/2.1.x/\napp.run(debug=True)\n</code></pre>"}]}